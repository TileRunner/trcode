self["webpackHotUpdate_N_E"]("pages/_app",{

/***/ "./node_modules/next/dist/compiled/css-loader/cjs.js??ruleSet[1].rules[2].oneOf[6].use[1]!./node_modules/next/dist/compiled/postcss-loader/cjs.js??ruleSet[1].rules[2].oneOf[6].use[2]!./pages/fyb/fyb.css":
/*!*****************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/compiled/css-loader/cjs.js??ruleSet[1].rules[2].oneOf[6].use[1]!./node_modules/next/dist/compiled/postcss-loader/cjs.js??ruleSet[1].rules[2].oneOf[6].use[2]!./pages/fyb/fyb.css ***!
  \*****************************************************************************************************************************************************************************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_next_dist_compiled_css_loader_api_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../node_modules/next/dist/compiled/css-loader/api.js */ "./node_modules/next/dist/compiled/css-loader/api.js");
/* harmony import */ var _node_modules_next_dist_compiled_css_loader_api_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_next_dist_compiled_css_loader_api_js__WEBPACK_IMPORTED_MODULE_0__);
// Imports

var ___CSS_LOADER_EXPORT___ = _node_modules_next_dist_compiled_css_loader_api_js__WEBPACK_IMPORTED_MODULE_0___default()(true);
// Module
___CSS_LOADER_EXPORT___.push([module.id, ".heart {\r\n    color: red;\r\n}\r\n.long {\r\n    font-size: x-small;\r\n    font-family: Arial, Helvetica, sans-serif;\r\n}\r\n.fryLetterActionButton {\r\n    margin-left: 5px;\r\n    border: none;\r\n    padding: 0px 0px 0px 0px;\r\n}\r\n.fryLetterActionButtonIcon {\r\n    margin: 5px 0px 0px 0px;\r\n}\r\n.fryLetterDiv {\r\n    background-color: black;\r\n    color: whitesmoke;\r\n    width: -moz-fit-content;\r\n    width: fit-content;\r\n    padding: 2px 10px 2px 2px;\r\n    margin: 0px 0px 10px 10px;\r\n    -webkit-user-select: none;\r\n            user-select: none;\r\n}\r\n.fybFryLetter {\r\n    font-family: monospace;\r\n    font-size: xx-large;\r\n    text-align: center;\r\n    padding: 0px 2px;\r\n}\r\n.fybFryLetter.Selected {\r\n    color: blue;\r\n    border-style: inset;\r\n    border-width: thick;\r\n    border-color: blue;\r\n    background-color: whitesmoke;\r\n}\r\n.thinChat {\r\n    border: none;\r\n    max-height: 600px;\r\n    overflow-y: scroll;\r\n}\r\n.thinChatFrom {\r\n    background-color: black;\r\n    color: white;\r\n}\r\n.thinChatFrom::before {\r\n    content: \">\";\r\n    color: yellow;\r\n}\r\n.thinChatFrom::after {\r\n    content: \":\";\r\n    color: yellow;\r\n    font-size: small;\r\n}\r\n.thinChatMsg {\r\n    font-style: italic;\r\n    color:whitesmoke;\r\n    background-color: black;\r\n}\r\n.thinChatInput {\r\n    font-style: italic;\r\n    color:whitesmoke;\r\n    background-color: blue;\r\n    width: 100%;\r\n}\r\n.thinChatInputEmpty {\r\n    background-color: whitesmoke;\r\n    width: 100%;\r\n    max-block-size: 30px;\r\n    cursor: text;\r\n}\r\n/*\r\n    When checked use <div className=\"checkbox On\" onClick={some code to toggle whether checked}><label>Some text</label></div> \r\n    When unchecked use  <div className=\"checkbox\" onClick={some code to toggle whether checked}><label>Some text</label></div> \r\n*/\r\n.checkbox {\r\n    line-height: 24px;\r\n    font-size: 16px;\r\n    -webkit-box-sizing: border-box;\r\n            box-sizing: border-box;\r\n}\r\n.checkbox label {\r\n    cursor: pointer;\r\n    position: relative;\r\n    display: inline-block;\r\n    /* 16px of the checkbox and 6px between it and text*/\r\n    padding-left: 22px;\r\n}\r\n.checkbox label::before,\r\n.checkbox label::after {\r\n    position: absolute;\r\n    content: \"\";\r\n    display: inline-block;\r\n}\r\n/* The box */\r\n.checkbox label::before {\r\n    height: 16px;\r\n    width: 16px;\r\n    border: 1px solid;\r\n    left: 0px;\r\n    top: 3px;\r\n}\r\n/* The check mark (<div className=\"checkbox On\">) */\r\n.checkbox.On label::after {\r\n    height: 5px;\r\n    width: 9px;\r\n    border-left: 2px solid;\r\n    border-bottom: 2px solid;\r\n    -webkit-transform: rotate(-45deg);\r\n            transform: rotate(-45deg);\r\n    left: 4px;\r\n    top: 7px;\r\n}\r\n", "",{"version":3,"sources":["webpack://pages/fyb/fyb.css"],"names":[],"mappings":"AAAA;IACI,UAAU;AACd;AACA;IACI,kBAAkB;IAClB,yCAAyC;AAC7C;AACA;IACI,gBAAgB;IAChB,YAAY;IACZ,wBAAwB;AAC5B;AACA;IACI,uBAAuB;AAC3B;AACA;IACI,uBAAuB;IACvB,iBAAiB;IACjB,uBAAkB;IAAlB,kBAAkB;IAClB,yBAAyB;IACzB,yBAAyB;IACzB,yBAAiB;YAAjB,iBAAiB;AACrB;AACA;IACI,sBAAsB;IACtB,mBAAmB;IACnB,kBAAkB;IAClB,gBAAgB;AACpB;AACA;IACI,WAAW;IACX,mBAAmB;IACnB,mBAAmB;IACnB,kBAAkB;IAClB,4BAA4B;AAChC;AACA;IACI,YAAY;IACZ,iBAAiB;IACjB,kBAAkB;AACtB;AACA;IACI,uBAAuB;IACvB,YAAY;AAChB;AACA;IACI,YAAY;IACZ,aAAa;AACjB;AACA;IACI,YAAY;IACZ,aAAa;IACb,gBAAgB;AACpB;AACA;IACI,kBAAkB;IAClB,gBAAgB;IAChB,uBAAuB;AAC3B;AACA;IACI,kBAAkB;IAClB,gBAAgB;IAChB,sBAAsB;IACtB,WAAW;AACf;AACA;IACI,4BAA4B;IAC5B,WAAW;IACX,oBAAoB;IACpB,YAAY;AAChB;AACA;;;CAGC;AACD;IACI,iBAAiB;IACjB,eAAe;IACf,8BAAsB;YAAtB,sBAAsB;AAC1B;AACA;IACI,eAAe;IACf,kBAAkB;IAClB,qBAAqB;IACrB,oDAAoD;IACpD,kBAAkB;AACtB;AACA;;IAEI,kBAAkB;IAClB,WAAW;IACX,qBAAqB;AACzB;AACA,YAAY;AACZ;IACI,YAAY;IACZ,WAAW;IACX,iBAAiB;IACjB,SAAS;IACT,QAAQ;AACZ;AACA,mDAAmD;AACnD;IACI,WAAW;IACX,UAAU;IACV,sBAAsB;IACtB,wBAAwB;IACxB,iCAAyB;YAAzB,yBAAyB;IACzB,SAAS;IACT,QAAQ;AACZ","sourcesContent":[".heart {\r\n    color: red;\r\n}\r\n.long {\r\n    font-size: x-small;\r\n    font-family: Arial, Helvetica, sans-serif;\r\n}\r\n.fryLetterActionButton {\r\n    margin-left: 5px;\r\n    border: none;\r\n    padding: 0px 0px 0px 0px;\r\n}\r\n.fryLetterActionButtonIcon {\r\n    margin: 5px 0px 0px 0px;\r\n}\r\n.fryLetterDiv {\r\n    background-color: black;\r\n    color: whitesmoke;\r\n    width: fit-content;\r\n    padding: 2px 10px 2px 2px;\r\n    margin: 0px 0px 10px 10px;\r\n    user-select: none;\r\n}\r\n.fybFryLetter {\r\n    font-family: monospace;\r\n    font-size: xx-large;\r\n    text-align: center;\r\n    padding: 0px 2px;\r\n}\r\n.fybFryLetter.Selected {\r\n    color: blue;\r\n    border-style: inset;\r\n    border-width: thick;\r\n    border-color: blue;\r\n    background-color: whitesmoke;\r\n}\r\n.thinChat {\r\n    border: none;\r\n    max-height: 600px;\r\n    overflow-y: scroll;\r\n}\r\n.thinChatFrom {\r\n    background-color: black;\r\n    color: white;\r\n}\r\n.thinChatFrom::before {\r\n    content: \">\";\r\n    color: yellow;\r\n}\r\n.thinChatFrom::after {\r\n    content: \":\";\r\n    color: yellow;\r\n    font-size: small;\r\n}\r\n.thinChatMsg {\r\n    font-style: italic;\r\n    color:whitesmoke;\r\n    background-color: black;\r\n}\r\n.thinChatInput {\r\n    font-style: italic;\r\n    color:whitesmoke;\r\n    background-color: blue;\r\n    width: 100%;\r\n}\r\n.thinChatInputEmpty {\r\n    background-color: whitesmoke;\r\n    width: 100%;\r\n    max-block-size: 30px;\r\n    cursor: text;\r\n}\r\n/*\r\n    When checked use <div className=\"checkbox On\" onClick={some code to toggle whether checked}><label>Some text</label></div> \r\n    When unchecked use  <div className=\"checkbox\" onClick={some code to toggle whether checked}><label>Some text</label></div> \r\n*/\r\n.checkbox {\r\n    line-height: 24px;\r\n    font-size: 16px;\r\n    box-sizing: border-box;\r\n}\r\n.checkbox label {\r\n    cursor: pointer;\r\n    position: relative;\r\n    display: inline-block;\r\n    /* 16px of the checkbox and 6px between it and text*/\r\n    padding-left: 22px;\r\n}\r\n.checkbox label::before,\r\n.checkbox label::after {\r\n    position: absolute;\r\n    content: \"\";\r\n    display: inline-block;\r\n}\r\n/* The box */\r\n.checkbox label::before {\r\n    height: 16px;\r\n    width: 16px;\r\n    border: 1px solid;\r\n    left: 0px;\r\n    top: 3px;\r\n}\r\n/* The check mark (<div className=\"checkbox On\">) */\r\n.checkbox.On label::after {\r\n    height: 5px;\r\n    width: 9px;\r\n    border-left: 2px solid;\r\n    border-bottom: 2px solid;\r\n    transform: rotate(-45deg);\r\n    left: 4px;\r\n    top: 7px;\r\n}\r\n"],"sourceRoot":""}]);
// Exports
/* harmony default export */ __webpack_exports__["default"] = (___CSS_LOADER_EXPORT___);


/***/ })

});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,