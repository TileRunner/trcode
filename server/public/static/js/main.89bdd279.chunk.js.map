{"version":3,"sources":["Mastermind.js","reportWebVitals.js","index.js"],"names":["Game","useState","setGuessCount","setSetGuessCount","secretWord","setSecretWord","secretDisplay","setSecretDisplay","guess","setGuess","guesses","setGuesses","solved","setSolved","displayGuesses","className","map","g","calcCorrectLetterCount","calcCorrectPositionCount","promptForGuess","length","name","value","onChange","e","target","toLowerCase","toUpperCase","promptForPlayAgain","onClick","pickRandomWord","newlen","url","toString","fetch","then","res","text","guessletters","n","letter","x","split","y","i","Mastermind","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.89bdd279.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport './Mastermind.css';\r\n\r\nfunction Mastermind()  {\r\n    return (\r\n        <Game />\r\n        );\r\n}\r\n\r\nfunction Game() {\r\n    const [setGuessCount, setSetGuessCount] = useState(0) // total guess count for the 2-8 letter set\r\n    const [secretWord, setSecretWord] = useState('')\r\n    const [secretDisplay, setSecretDisplay] = useState('')\r\n    const [guess, setGuess] = useState('')\r\n    const [guesses, setGuesses] = useState([])\r\n    const [solved, setSolved] = useState(false)\r\n    const displayGuesses = showGuessesTable();\r\n    const promptForGuess = showGuessPrompt();\r\n    const promptForPlayAgain = showPlayAgainPrompt();\r\n    return (\r\n        <div className=\"Mastermind\">\r\n            <h1>Word Mastermind</h1>\r\n            <table>\r\n                <tr>\r\n                    <td className=\"Outertable\">\r\n                    {secretWord === '' ? pickRandomWord() : ''}\r\n                    <h2>Secret Word: {solved ? secretWord : secretDisplay}</h2>\r\n                    {solved ?\r\n                        promptForPlayAgain\r\n                        :\r\n                        promptForGuess\r\n                    }\r\n                    </td>\r\n                    <td className=\"Outertable\">\r\n                    {guesses.length === 0 ?\r\n                        <p>No guesses yet</p> \r\n                        :\r\n                        displayGuesses\r\n                    }\r\n                    </td>\r\n                </tr>\r\n            </table>\r\n            {solved ?\r\n                <br></br>\r\n                :\r\n                guesses.length === 0 ?\r\n                    <p>Start guessing</p>\r\n                    :\r\n                    <p>Keep guessing</p>\r\n            }\r\n            <h3>Total guesses for the set: {setGuessCount}</h3>\r\n        </div>\r\n    );\r\n\r\n    function showPlayAgainPrompt() {\r\n        return <div>\r\n            <h1>Solved in {guesses.length} moves!</h1>\r\n            <button\r\n            onClick={function () {\r\n                pickRandomWord();\r\n                setGuess('');\r\n                setGuesses([]);\r\n                setSolved(false);\r\n            } }\r\n            >\r\n                Play Again!\r\n            </button>\r\n            </div>;\r\n    }\r\n\r\n    function showGuessPrompt() {\r\n        return <div className=\"form-group\">\r\n            {guesses.length === 0 ?\r\n                <label>First guess:</label>\r\n                :\r\n                <label>Next guess:</label>\r\n            }\r\n            <input className=\"form-control\"\r\n                name=\"guess\"\r\n                value={guess}\r\n                onChange={(e) => {\r\n                    if (e.target.value.toLowerCase() === e.target.value.toUpperCase())\r\n                    {\r\n                        // Not a letter if lower = upper\r\n                    }\r\n                    else\r\n                    {\r\n                        if (e.target.value.length === secretWord.length) {\r\n                            const newSetGuessCount = setGuessCount + 1;\r\n                            setSetGuessCount(newSetGuessCount);\r\n                            setGuesses([...guesses, e.target.value.toUpperCase()]);\r\n                            setGuess('');\r\n                            if (e.target.value.toUpperCase() === secretWord)\r\n                            {\r\n                                setSolved(true);\r\n                            }\r\n                        } else {\r\n                            setGuess(e.target.value.toUpperCase());\r\n                        }\r\n                    }\r\n                } } />\r\n        </div>;\r\n    }\r\n\r\n    function showGuessesTable() {\r\n        return <table className=\"Guesstable\">\r\n            <thead>\r\n                <tr>\r\n                    <th>Guess</th>\r\n                    <th>Correct Letter</th>\r\n                    <th>Correct Position</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {guesses.map((g) => (\r\n                    <tr>\r\n                        <td>{g}</td>\r\n                        <td>{calcCorrectLetterCount(g)}</td>\r\n                        <td>{calcCorrectPositionCount(g)}</td>\r\n                    </tr>\r\n                )\r\n                )}\r\n            </tbody>\r\n        </table>;\r\n    }\r\n\r\n    function pickRandomWord() {\r\n        const newlen = secretWord ? secretWord.length < 2 ? 2 : secretWord.length > 7 ? 2 : secretWord.length + 1 : 2;\r\n        if (newlen === 2 && setGuessCount !== 0)\r\n        {\r\n            setSetGuessCount(0);\r\n        }\r\n        const url = 'https://words-scrabble.herokuapp.com/api/random/' + newlen.toString();\r\n        fetch(url).then(res => res.text()).then(text => {\r\n            setSecretWord(text);\r\n            setSecretDisplay('Length ' + text.length);\r\n        })\r\n    }\r\n\r\n    function calcCorrectLetterCount(guessletters) {\r\n        let n = 0\r\n        const alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\r\n        for(let letter of alphabet) {\r\n            let x = secretWord.split(letter).length - 1\r\n            let y = guessletters.split(letter).length - 1\r\n            n = n + (x < y ? x : y)\r\n        }\r\n        return n\r\n    }\r\n\r\n    function calcCorrectPositionCount(guessletters) {\r\n        let n = 0\r\n        for(var i=0; i<secretWord.length; ++i) {\r\n            n = n + (secretWord[i] === guessletters[i] ? 1 : 0)\r\n        }\r\n        return n\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default Mastermind;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import App from './App';\nimport Mastermind from './Mastermind';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    {/* <App /> */}\n    <Mastermind />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}