{"version":3,"sources":["Mastermind.js","reportWebVitals.js","index.js"],"names":["Game","useState","setSolveCounts","setSetSolveCounts","setGuessCount","setSetGuessCount","secretWord","setSecretWord","secretDisplay","setSecretDisplay","guess","setGuess","guesses","setGuesses","solved","setSolved","displayGuesses","className","map","g","calcCorrectLetterCount","calcCorrectPositionCount","promptForGuess","length","name","value","onChange","e","target","toLowerCase","toUpperCase","newSetGuessCount","promptForPlayAgain","onClick","pickRandomWord","num","toString","newlen","url","fetch","then","res","text","guessletters","n","letter","x","split","y","i","Mastermind","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.73efea39.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport './Mastermind.css';\r\n\r\nfunction Mastermind()  {\r\n    return (\r\n        <Game />\r\n        );\r\n}\r\n\r\nfunction Game() {\r\n    const [setSolveCounts, setSetSolveCounts] = useState([]) // how many guesses to solve each set\r\n    const [setGuessCount, setSetGuessCount] = useState(0) // total guess count for the 2-8 letter set\r\n    const [secretWord, setSecretWord] = useState('')\r\n    const [secretDisplay, setSecretDisplay] = useState('')\r\n    const [guess, setGuess] = useState('')\r\n    const [guesses, setGuesses] = useState([])\r\n    const [solved, setSolved] = useState(false)\r\n    const displayGuesses = showGuessesTable();\r\n    const promptForGuess = showGuessPrompt();\r\n    const promptForPlayAgain = showPlayAgainPrompt();\r\n    return (\r\n        <div className=\"Mastermind\">\r\n            <h1>Word Mastermind</h1>\r\n            <table>\r\n                <tr>\r\n                    <td className=\"Outertable\">\r\n                        <p>Cycle through 2-8 letter words per set.</p>\r\n                        <h3>Total guesses for current word: {guesses.length}</h3>\r\n                        <h3>Total guesses for current set: {setGuessCount}</h3>\r\n                        <p>Completed sets guess totals: {setSolveCounts.map(num => (<span key={num.toString()}>{num} </span>))}</p>\r\n                    </td>\r\n                    <td className=\"Outertable\">\r\n                    {secretWord === '' ? pickRandomWord() : ''}\r\n                    <h2>Secret Word: {solved ? secretWord : secretDisplay}</h2>\r\n                    {solved ?\r\n                        promptForPlayAgain\r\n                        :\r\n                        promptForGuess\r\n                    }\r\n                    </td>\r\n                    <td className=\"Outertable\">\r\n                        {guesses.length === 0 ?\r\n                            <p>No guesses yet</p> \r\n                            :\r\n                            displayGuesses\r\n                        }\r\n                    </td>\r\n                </tr>\r\n            </table>\r\n            {solved ?\r\n                <br></br>\r\n                :\r\n                guesses.length === 0 ?\r\n                    <p>Start guessing</p>\r\n                    :\r\n                    <p>Keep guessing</p>\r\n            }\r\n        </div>\r\n    );\r\n\r\n    function showPlayAgainPrompt() {\r\n        return <div>\r\n            <h1>Solved in {guesses.length} moves!</h1>\r\n            <button\r\n            onClick={function () {\r\n                pickRandomWord();\r\n                setGuess('');\r\n                setGuesses([]);\r\n                setSolved(false);\r\n            } }\r\n            >\r\n                {secretWord.length === 8 ? \"Start Another Set!\" : \"Start Next Word\"}\r\n            </button>\r\n            </div>;\r\n    }\r\n\r\n    function showGuessPrompt() {\r\n        return <div className=\"form-group\">\r\n            {guesses.length === 0 ?\r\n                <label>First guess:</label>\r\n                :\r\n                <label>Next guess:</label>\r\n            }\r\n            <input className=\"form-control\"\r\n                name=\"guess\"\r\n                value={guess}\r\n                onChange={(e) => {\r\n                    if (e.target.value.toLowerCase() === e.target.value.toUpperCase())\r\n                    {\r\n                        // Not a letter if lower = upper\r\n                    }\r\n                    else\r\n                    {\r\n                        if (e.target.value.length === secretWord.length) {\r\n                            const newSetGuessCount = setGuessCount + 1;\r\n                            setSetGuessCount(newSetGuessCount);\r\n                            setGuesses([...guesses, e.target.value.toUpperCase()]);\r\n                            setGuess('');\r\n                            if (e.target.value.toUpperCase() === secretWord)\r\n                            {\r\n                                setSolved(true);\r\n                                if (secretWord.length === 8) {\r\n                                    setSetSolveCounts([...setSolveCounts, newSetGuessCount]);\r\n                                }\r\n                            }\r\n                        } else {\r\n                            setGuess(e.target.value.toUpperCase());\r\n                        }\r\n                    }\r\n                } } />\r\n        </div>;\r\n    }\r\n\r\n    function showGuessesTable() {\r\n        return <table className=\"Guesstable\">\r\n            <thead>\r\n                <tr>\r\n                    <th>Guess</th>\r\n                    <th>Correct Letter</th>\r\n                    <th>Correct Position</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {guesses.map((g) => (\r\n                    <tr>\r\n                        <td>{g}</td>\r\n                        <td>{calcCorrectLetterCount(g)}</td>\r\n                        <td>{calcCorrectPositionCount(g)}</td>\r\n                    </tr>\r\n                )\r\n                )}\r\n            </tbody>\r\n        </table>;\r\n    }\r\n\r\n    function pickRandomWord() {\r\n        const newlen = secretWord ? secretWord.length < 2 ? 2 : secretWord.length > 7 ? 2 : secretWord.length + 1 : 2;\r\n        if (newlen === 2 && setGuessCount !== 0)\r\n        {\r\n            setSetGuessCount(0);\r\n        }\r\n        const url = 'https://words-scrabble.herokuapp.com/api/random/' + newlen.toString();\r\n        fetch(url).then(res => res.text()).then(text => {\r\n            setSecretWord(text);\r\n            setSecretDisplay('Length ' + text.length);\r\n        })\r\n    }\r\n\r\n    function calcCorrectLetterCount(guessletters) {\r\n        let n = 0\r\n        const alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\r\n        for(let letter of alphabet) {\r\n            let x = secretWord.split(letter).length - 1\r\n            let y = guessletters.split(letter).length - 1\r\n            n = n + (x < y ? x : y)\r\n        }\r\n        return n\r\n    }\r\n\r\n    function calcCorrectPositionCount(guessletters) {\r\n        let n = 0\r\n        for(var i=0; i<secretWord.length; ++i) {\r\n            n = n + (secretWord[i] === guessletters[i] ? 1 : 0)\r\n        }\r\n        return n\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default Mastermind;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import App from './App';\nimport Mastermind from './Mastermind';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    {/* <App /> */}\n    <Mastermind />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}